# @file macd_strategy_demo.py
# @brief standard MACD strategy demo

import ipdb
from datetime import datetime
from agares.engine.ag import (
	Strategy,
	create_trading_system,
	run,
	buy,
	sell,
	report)
from talib import (MA, MACD)
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class new_extreme_Strategy(Strategy):
    """ 
    The new extreme strategy on daily candlestick data.
    Buy an asset when close price rises above the highest price in last m days,
    and sell it when close price falls under the lowest price in last m days.
    """
    def __init__(self, name, m):
	super(new_extreme_Strategy, self).__init__(name)
	self.m = m

    @staticmethod
    def ExtremePrice(close, m):
	"""
	    Return highest and lowest prices of the last m timeunit
	    Return:
		highest(np.ndarray)
		lowest(np.ndarray)
	"""
	window = []
	highest = np.zeros(len(close)) 
	lowest = np.zeros(len(close)) 
	for i, price in enumerate(close):
	    if i < m - 1: 
		highest[i], lowest[i] = np.nan, np.nan # skip m timeunit.
		window.append(close[i])		
		continue 
	    window.append(close[i])
	    highest[i] = np.max(window)
	    lowest[i] = np.min(window)
	    window.pop(0)
	return highest, lowest


    # the variable name 'cst' is short for 'candlestick'
    def compute_trading_points(self, cst):
	df_1day = cst['1Day']
	datetime_1day = df_1day.index
	close_1day = df_1day['close'].values

	highest, lowest = ExtremePrice(close_1day, self.m)
	print highest, lowest

	# MACD
	dif, dea, _ = MACD(close_1day, self.nslow, self.nfast, self.m)
	df_macd = pd.DataFrame({'dif': dif, 'dea': dea}, 
				index = datetime_1day)
	#df_macd.plot()
	#plt.show()
	start_flag = 0
	hold_flag = 0
	for i, ticker in enumerate(df_macd.index):
	    # skip the days of 'dif'>='dea' at the beginning
	    # those should be the days waiting fo selling, not buying, thus not suitable for a start
	    if (start_flag == 0) and (df_macd.iloc[i]['dif'] >= df_macd.iloc[i]['dea']):
		continue
	    else:
		start_flag = 1
	    # start trading
	    if (start_flag == 1):
		price = float(close_1day[i])
		if (hold_flag == 0) and (df_macd.iloc[i]['dif'] > df_macd.iloc[i]['dea']): 
		    buy(price, str(ticker), 0.9)
		    hold_flag = 1
		if (hold_flag == 1) and (df_macd.iloc[i]['dif'] < df_macd.iloc[i]['dea']): 
		    sell(price, str(ticker), 1)
		    hold_flag = 0
	


if __name__ == '__main__':
    # list of candlestick data files, each item represents a period data of the interested stock
    # 'mp' refers to 'multiple period'
    mpstock = ['000001.sz-1Day']
    # create a trading strategy
    strategy = new_extreme_Strategy('The new extreme strategy no.1', 10)
    # set start and end datetime
    dt_start, dt_end = datetime(2015,5,1), datetime(2016,1,22)
    # personal settings of a trading system
    settings = {'capital': 10000000}
    # create a trading system
    create_trading_system(strategy, mpstock, dt_start, dt_end, settings)
    # start back testing
    run()
    # report performance of the trading system
    df_equity = report()
    # plot equity
    df_equity.plot()
    print "Plot is shown."
    plt.show()
