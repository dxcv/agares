# @file mix_strategy_demo.py
# @brief standard MACD strategy demo

import ipdb
from datetime import datetime
from agares.engine.ag import (
	Strategy,
	create_trading_system,
	run,
	buy,
	sell,
	report)
from talib import (MA, MACD)
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class MACD_Strategy(Strategy):
    """ 
    The standard MACD strategy on daily candlestick data.
    Buy an asset when dif rises above dea,
    and sell it vice versa.
    """
    def __init__(self, name, nslow, nfast, m):
	super(MACD_Strategy, self).__init__(name)
	self.nfast = nfast
	self.nslow = nslow
	self.m = m


    # the variable name 'cst' is short for 'candlestick'
    def compute_trading_points(self, cst):
	df_1day = cst['1Day']
	datetime_1day = df_1day.index
	close_1day = df_1day['close'].values

	# MACD
	dif, dea, _ = MACD(close_1day, self.nslow, self.nfast, self.m)
	df_macd = pd.DataFrame({'dif': dif, 'dea': dea}, 
				index = datetime_1day)
	#df_macd.plot()
	#plt.show()
	start_flag = 0
	hold_flag = 0
	for i, ticker in enumerate(df_macd.index):
	    # skip null value at the beginning
	    if np.isnan(df_macd.iloc[i]['dif']) or np.isnan(df_macd.iloc[i]['dea']):
		continue 
	    # skip the days of 'dif'>='dea' at the beginning
	    # those should be the days waiting fo selling, not buying, thus not suitable for a start
	    if (start_flag == 0) and (df_macd.iloc[i]['dif'] >= df_macd.iloc[i]['dea']):
		continue
	    else:
		start_flag = 1
	    # start trading
	    if (start_flag == 1):
		price = float(close_1day[i])
		if (hold_flag == 0) and (df_macd.iloc[i]['dif'] > df_macd.iloc[i]['dea']): 
		    buy(price, str(ticker), 1)
		    hold_flag = 1
		if (hold_flag == 1) and (df_macd.iloc[i]['dif'] < df_macd.iloc[i]['dea']): 
		    sell(price, str(ticker), 1)
		    hold_flag = 0
	

class MA_Strategy(Strategy):
    """ 
    The simplest moving average (MA) strategy
    Buy an asset when the 10-timeunit moving average of its price rises above its 20-timeunit average,
    and sell it vice versa.
    """
    def __init__(self, name, nfast, nslow):
	super(MA_Strategy, self).__init__(name)
	self.nfast = nfast
	self.nslow = nslow


    # the variable name 'cst' is short for 'candlestick'
    def compute_trading_points(self, cst):
	df_1day = cst['1Day']
	datetime_1day = df_1day.index
	close_1day = df_1day['close'].values

	# Moving average
	maf = MA(close_1day, self.nfast)
	mas = MA(close_1day, self.nslow)
	df_ma = pd.DataFrame({'ma_fast': maf, 'ma_slow': mas}, 
				index = datetime_1day)

	#df_ma.plot()
	#plt.show()
	start_flag = 0
	hold_flag = 0
	for i, ticker in enumerate(df_ma.index):
	    # skip null value at the beginning
	    if np.isnan(df_ma.iloc[i]['ma_fast']) or np.isnan(df_ma.iloc[i]['ma_slow']):
		continue 
	    # skip the days of 'ma_fast'>='ma_slow' at the beginning
	    # those should be the days waiting fo selling, not buying, thus not suitable for a start
	    if (start_flag == 0) and (df_ma.iloc[i]['ma_fast'] <= df_ma.iloc[i]['ma_slow']):
		continue
	    else:
		start_flag = 1
	    # start trading
	    if (start_flag == 1):
		price = float(close_1day[i])
		if (hold_flag == 0) and (df_ma.iloc[i]['ma_fast'] > df_ma.iloc[i]['ma_slow']): 
		    buy(price, str(ticker), 1)
		    hold_flag = 1
		if (hold_flag == 1) and (df_ma.iloc[i]['ma_fast'] < df_ma.iloc[i]['ma_slow']): 
		    sell(price, str(ticker), 1)
		    hold_flag = 0


class new_extreme_Strategy(Strategy):
    """ 
    The new extreme strategy on daily candlestick data.
    Buy an asset when close price rises above the highest price in last m days,
    and sell it when close price falls under the lowest price in last m days.
    """
    def __init__(self, name, m):
	super(new_extreme_Strategy, self).__init__(name)
	self.m = m

    @staticmethod
    def ExtremePrice(close, m):
	"""
	    Return highest and lowest prices of the last m timeunit.
	    Note that both return variables (highest and lowest) start 
	    from the (m+1)-th timeunit. The first m-th timeunit are np.nan
	    Return:
		highest(np.ndarray)
		lowest(np.ndarray)
	"""
	window = []
	highest = np.zeros(len(close)) 
	lowest = np.zeros(len(close)) 
	for i, price in enumerate(close):
	    if i < m: 
		highest[i], lowest[i] = np.nan, np.nan # skip m timeunit.
		window.append(close[i])		
		continue 
	    # note that both highest and lowest start from the (m+1)-th timeunit
	    # the first m-th timeunit are np.nan
	    highest[i] = np.max(window)
	    lowest[i] = np.min(window)
	    window.pop(0)
	    window.append(close[i])
	return highest, lowest


    # the variable name 'cst' is short for 'candlestick'
    def compute_trading_points(self, cst):
	df_1day = cst['1Day']
	datetime_1day = df_1day.index
	close_1day = df_1day['close'].values

	# ExtremePrice
	highest, lowest = self.ExtremePrice(close_1day, self.m)
	print highest, lowest

	df_extreme = pd.DataFrame({'close': close_1day, 'highest': highest, 'lowest': lowest}, 
				index = datetime_1day)
	#df_extreme.plot()
	#plt.show()
	hold_flag = 0
	for i, ticker in enumerate(df_extreme.index):
	    # skip null value at the beginning
	    if np.isnan(df_extreme.iloc[i]['highest']) or np.isnan(df_extreme.iloc[i]['lowest']):
		continue 
	    # start trading
	    price = float(close_1day[i])
	    if (hold_flag == 0) and (df_extreme.iloc[i]['close'] > df_extreme.iloc[i]['highest']): 
	        buy(price, str(ticker), 0.9)
	        hold_flag = 1
	    if (hold_flag == 1) and (df_extreme.iloc[i]['close'] < df_extreme.iloc[i]['lowest']): 
	        sell(price, str(ticker), 1)
	        hold_flag = 0


if __name__ == '__main__':
    # list of candlestick data files, each item represents a period data of the interested stock
    # 'mp' refers to 'multiple period'
    mpstock = ['000001.sz-1Day']
    # create a trading strategy
    macd_strategy = MACD_Strategy('Standard MACD strategy no.1', 26, 12, 9)
    # set start and end datetime
    dt_start, dt_end = datetime(1997,1,1), datetime(2016,1,22)
    # personal settings of a trading system
    settings = {'capital': 10000000}
    # create a trading system
    create_trading_system(macd_strategy, mpstock, dt_start, dt_end, settings)
    # start back testing
    run()
    # report performance of the trading system
    macd_df_equity = report()


    # create a trading strategy
    ma_strategy = MA_Strategy('Simple MA strategy no.1', 10, 20)
    # create a trading system
    create_trading_system(ma_strategy, mpstock, dt_start, dt_end, settings)
    # start back testing
    run()
    # report performance of the trading system
    ma_df_equity = report()


    # create a trading strategy
    new_ext_strategy = new_extreme_Strategy('The new extreme strategy no.1', 10)
    # create a trading system
    create_trading_system(new_ext_strategy, mpstock, dt_start, dt_end, settings)
    # start back testing
    run()
    # report performance of the trading system
    new_ext_df_equity = report()


    # plot equity
    df_equity = (macd_df_equity + ma_df_equity + new_ext_df_equity)/3
    df_equity.plot()
    print "Plot is shown."
    plt.show()
