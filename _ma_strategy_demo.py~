# @file macd_strategy_demo.py
# @brief standard MACD strategy demo

import ipdb
from datetime import datetime
from agares.engine.ag import (
	Strategy,
	create_trading_system,
	run,
	buy,
	sell,
	report)
from talib import (MA, MACD)
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

class MA_Strategy(Strategy):
    """ 
    The simplest moving average (MA) strategy
    Buy an asset when the 10-timeunit moving average of its price rose above its 20-timeunit average,
    and sell it vice versa.
    """
    def __init__(self, name, nfast, nslow):
	super(MA_Strategy, self).__init__(name)
	self.nfast = nfast
	self.nslow = nslow


    # the variable name 'cst' is short for 'candlestick'
    def compute_trading_points(self, cst):
	df_1day = cst['1Day']
	datetime_1day = df_1day.index
	close_1day = df_1day['close'].values

	# Moving average
	maf = MA(close_1day, self.nfast)
	mas = MA(close_1day, self.nslow)
	df_ma = pd.DataFrame({'ma_fast': maf, 'ma_slow': mas}, 
				index = datetime_1day)
	# MACD
	dif, dea, _ = MACD(close_1day)
	df_macd = pd.DataFrame({'dif': dif, 'dea': dea}, 
				index = datetime_1day)
	#df_ma.plot()
	#plt.show()
	start_flag = 0
	hold_flag = 0
	for i, ticker in enumerate(df_ma.index):
	    # skip the days of 'ma_fast'>='ma_slow' at the beginning
	    # those should be the days waiting fo selling, not buying, thus not suitable for a start
	    if (start_flag == 0) and (df_ma.iloc[i]['ma_fast'] <= df_ma.iloc[i]['ma_slow']):
		continue
	    else:
		start_flag = 1
	    # start trading
	    if (start_flag == 1):
		price = float(close_1day[i])
		if (hold_flag == 0) and (df_ma.iloc[i]['ma_fast'] > df_ma.iloc[i]['ma_slow']): 
		    buy(price, str(ticker), 1)
		    hold_flag = 1
		if (hold_flag == 1) and (df_ma.iloc[i]['ma_fast'] < df_ma.iloc[i]['ma_slow']): 
		    sell(price, str(ticker), 1)
		    hold_flag = 0
	


if __name__ == '__main__':
    # list of candlestick data files, each item represents a period data of the interested stock
    # 'mp' refers to 'multiple period'
    mpstock = ['000001.sz-1Day']
    # create a trading strategy
    strategy = MA_Strategy('Simple MA strategy no.1', 10, 20)
    # set start and end datetime
    dt_start, dt_end = datetime(1997,1,1), datetime(2016,1,22)
    # personal settings of a trading system
    settings = {'capital': 10000000}
    # create a trading system
    create_trading_system(strategy, mpstock, dt_start, dt_end, settings)
    # start back testing
    run()
    # report performance of the trading system
    report()
